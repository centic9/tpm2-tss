From eeb5a2fddce43d00eb5d8aa7c61b099bdf87a9f4 Mon Sep 17 00:00:00 2001
From: Tadeusz Struk <tadeusz.struk@intel.com>
Date: Mon, 22 Oct 2018 10:19:37 -0700
Subject: [PATCH] test: fix tpm2b unit tests failing on big endian

tpm2b unit test fails on big endian machines

Fixes: #1171

Signed-off-by: Tadeusz Struk <tadeusz.struk@intel.com>
Origin: upstream, https://github.com/tpm2-software/tpm2-tss/commit/eeb5a2fddce43d00eb5d8aa7c61b099bdf87a9f4
Bug: https://github.com/tpm2-software/tpm2-tss/issues/1171
Bug-Debian: https://bugs.debian.org/910858
---
 test/unit/TPM2B-marshal.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

Index: tpm2-tss-2.1.0/test/unit/TPM2B-marshal.c
===================================================================
--- tpm2-tss-2.1.0.orig/test/unit/TPM2B-marshal.c
+++ tpm2-tss-2.1.0/test/unit/TPM2B-marshal.c
@@ -210,17 +210,17 @@ tpm2b_unmarshal_success(void **state)
     assert_int_equal (rc, TSS2_RC_SUCCESS);
     assert_int_equal (dgst.size, 4);
     ptr = (uint32_t *)dgst.buffer;
-    assert_int_equal (*ptr, value);
+    assert_int_equal (le32toh(*ptr), value);
     assert_int_equal (offset, 6);
 
     rc = Tss2_MU_TPM2B_ECC_POINT_Unmarshal(buffer, buffer_size, &offset, &point);
     assert_int_equal (rc, TSS2_RC_SUCCESS);
     assert_int_equal (point.point.x.size, 4);
     ptr = (uint32_t *)point.point.x.buffer;
-    assert_int_equal (*ptr, value);
+    assert_int_equal (le32toh(*ptr), value);
     assert_int_equal (point.point.y.size, 4);
     ptr = (uint32_t *)point.point.y.buffer;
-    assert_int_equal (*ptr, value2);
+    assert_int_equal (le32toh(*ptr), value2);
     assert_int_equal (offset, 20);
 }
 
@@ -251,17 +251,17 @@ tpm2b_unmarshal_success_offset(void **st
     assert_int_equal (rc, TSS2_RC_SUCCESS);
     assert_int_equal (dgst.size, 4);
     ptr = (uint32_t *)dgst.buffer;
-    assert_int_equal (*ptr, value);
+    assert_int_equal (le32toh(*ptr), value);
     assert_int_equal (offset, 12);
 
     rc = Tss2_MU_TPM2B_ECC_POINT_Unmarshal(buffer, buffer_size, &offset, &point);
     assert_int_equal (rc, TSS2_RC_SUCCESS);
     assert_int_equal (point.point.x.size, 8);
     ptr2 = (uint64_t *)point.point.x.buffer;
-    assert_int_equal (*ptr2, value2);
+    assert_int_equal (le64toh(*ptr2), value2);
     assert_int_equal (point.point.y.size, 4);
     ptr = (uint32_t *)point.point.y.buffer;
-    assert_int_equal (*ptr, value3);
+    assert_int_equal (le32toh(*ptr), value3);
     assert_int_equal (offset, 30);
 }
 
